/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tweet.kafka.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Tweet extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2632975023973348425L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"tweet.kafka.avro\",\"fields\":[{\"name\":\"tweetdate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"userID\",\"type\":[\"long\",\"null\"]},{\"name\":\"fullName\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"tweetID\",\"type\":[\"long\",\"null\"]},{\"name\":\"tweetSource\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]},{\"name\":\"isTruncated\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"isRT\",\"type\":[\"boolean\",\"null\"]},{\"name\":\"tweet\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tweet> ENCODER =
      new BinaryMessageEncoder<Tweet>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tweet> DECODER =
      new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Tweet> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Tweet> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Tweet> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tweet>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Tweet to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Tweet from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Tweet instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Tweet fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String tweetdate;
  @Deprecated public java.lang.Long userID;
  @Deprecated public java.lang.String fullName;
  @Deprecated public java.lang.Long tweetID;
  @Deprecated public java.lang.String tweetSource;
  @Deprecated public java.lang.Boolean isTruncated;
  @Deprecated public java.lang.Boolean isRT;
  @Deprecated public java.lang.String tweet;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tweet() {}

  /**
   * All-args constructor.
   * @param tweetdate The new value for tweetdate
   * @param userID The new value for userID
   * @param fullName The new value for fullName
   * @param tweetID The new value for tweetID
   * @param tweetSource The new value for tweetSource
   * @param isTruncated The new value for isTruncated
   * @param isRT The new value for isRT
   * @param tweet The new value for tweet
   */
  public Tweet(java.lang.String tweetdate, java.lang.Long userID, java.lang.String fullName, java.lang.Long tweetID, java.lang.String tweetSource, java.lang.Boolean isTruncated, java.lang.Boolean isRT, java.lang.String tweet) {
    this.tweetdate = tweetdate;
    this.userID = userID;
    this.fullName = fullName;
    this.tweetID = tweetID;
    this.tweetSource = tweetSource;
    this.isTruncated = isTruncated;
    this.isRT = isRT;
    this.tweet = tweet;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tweetdate;
    case 1: return userID;
    case 2: return fullName;
    case 3: return tweetID;
    case 4: return tweetSource;
    case 5: return isTruncated;
    case 6: return isRT;
    case 7: return tweet;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tweetdate = value$ != null ? value$.toString() : null; break;
    case 1: userID = (java.lang.Long)value$; break;
    case 2: fullName = value$ != null ? value$.toString() : null; break;
    case 3: tweetID = (java.lang.Long)value$; break;
    case 4: tweetSource = value$ != null ? value$.toString() : null; break;
    case 5: isTruncated = (java.lang.Boolean)value$; break;
    case 6: isRT = (java.lang.Boolean)value$; break;
    case 7: tweet = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tweetdate' field.
   * @return The value of the 'tweetdate' field.
   */
  public java.lang.String getTweetdate() {
    return tweetdate;
  }


  /**
   * Sets the value of the 'tweetdate' field.
   * @param value the value to set.
   */
  public void setTweetdate(java.lang.String value) {
    this.tweetdate = value;
  }

  /**
   * Gets the value of the 'userID' field.
   * @return The value of the 'userID' field.
   */
  public java.lang.Long getUserID() {
    return userID;
  }


  /**
   * Sets the value of the 'userID' field.
   * @param value the value to set.
   */
  public void setUserID(java.lang.Long value) {
    this.userID = value;
  }

  /**
   * Gets the value of the 'fullName' field.
   * @return The value of the 'fullName' field.
   */
  public java.lang.String getFullName() {
    return fullName;
  }


  /**
   * Sets the value of the 'fullName' field.
   * @param value the value to set.
   */
  public void setFullName(java.lang.String value) {
    this.fullName = value;
  }

  /**
   * Gets the value of the 'tweetID' field.
   * @return The value of the 'tweetID' field.
   */
  public java.lang.Long getTweetID() {
    return tweetID;
  }


  /**
   * Sets the value of the 'tweetID' field.
   * @param value the value to set.
   */
  public void setTweetID(java.lang.Long value) {
    this.tweetID = value;
  }

  /**
   * Gets the value of the 'tweetSource' field.
   * @return The value of the 'tweetSource' field.
   */
  public java.lang.String getTweetSource() {
    return tweetSource;
  }


  /**
   * Sets the value of the 'tweetSource' field.
   * @param value the value to set.
   */
  public void setTweetSource(java.lang.String value) {
    this.tweetSource = value;
  }

  /**
   * Gets the value of the 'isTruncated' field.
   * @return The value of the 'isTruncated' field.
   */
  public java.lang.Boolean getIsTruncated() {
    return isTruncated;
  }


  /**
   * Sets the value of the 'isTruncated' field.
   * @param value the value to set.
   */
  public void setIsTruncated(java.lang.Boolean value) {
    this.isTruncated = value;
  }

  /**
   * Gets the value of the 'isRT' field.
   * @return The value of the 'isRT' field.
   */
  public java.lang.Boolean getIsRT() {
    return isRT;
  }


  /**
   * Sets the value of the 'isRT' field.
   * @param value the value to set.
   */
  public void setIsRT(java.lang.Boolean value) {
    this.isRT = value;
  }

  /**
   * Gets the value of the 'tweet' field.
   * @return The value of the 'tweet' field.
   */
  public java.lang.String getTweet() {
    return tweet;
  }


  /**
   * Sets the value of the 'tweet' field.
   * @param value the value to set.
   */
  public void setTweet(java.lang.String value) {
    this.tweet = value;
  }

  /**
   * Creates a new Tweet RecordBuilder.
   * @return A new Tweet RecordBuilder
   */
  public static tweet.kafka.avro.Tweet.Builder newBuilder() {
    return new tweet.kafka.avro.Tweet.Builder();
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tweet RecordBuilder
   */
  public static tweet.kafka.avro.Tweet.Builder newBuilder(tweet.kafka.avro.Tweet.Builder other) {
    if (other == null) {
      return new tweet.kafka.avro.Tweet.Builder();
    } else {
      return new tweet.kafka.avro.Tweet.Builder(other);
    }
  }

  /**
   * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
   * @param other The existing instance to copy.
   * @return A new Tweet RecordBuilder
   */
  public static tweet.kafka.avro.Tweet.Builder newBuilder(tweet.kafka.avro.Tweet other) {
    if (other == null) {
      return new tweet.kafka.avro.Tweet.Builder();
    } else {
      return new tweet.kafka.avro.Tweet.Builder(other);
    }
  }

  /**
   * RecordBuilder for Tweet instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
    implements org.apache.avro.data.RecordBuilder<Tweet> {

    private java.lang.String tweetdate;
    private java.lang.Long userID;
    private java.lang.String fullName;
    private java.lang.Long tweetID;
    private java.lang.String tweetSource;
    private java.lang.Boolean isTruncated;
    private java.lang.Boolean isRT;
    private java.lang.String tweet;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tweet.kafka.avro.Tweet.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tweetdate)) {
        this.tweetdate = data().deepCopy(fields()[0].schema(), other.tweetdate);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.tweetID)) {
        this.tweetID = data().deepCopy(fields()[3].schema(), other.tweetID);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tweetSource)) {
        this.tweetSource = data().deepCopy(fields()[4].schema(), other.tweetSource);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isTruncated)) {
        this.isTruncated = data().deepCopy(fields()[5].schema(), other.isTruncated);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.isRT)) {
        this.isRT = data().deepCopy(fields()[6].schema(), other.isRT);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.tweet)) {
        this.tweet = data().deepCopy(fields()[7].schema(), other.tweet);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing Tweet instance
     * @param other The existing instance to copy.
     */
    private Builder(tweet.kafka.avro.Tweet other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.tweetdate)) {
        this.tweetdate = data().deepCopy(fields()[0].schema(), other.tweetdate);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userID)) {
        this.userID = data().deepCopy(fields()[1].schema(), other.userID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.fullName)) {
        this.fullName = data().deepCopy(fields()[2].schema(), other.fullName);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.tweetID)) {
        this.tweetID = data().deepCopy(fields()[3].schema(), other.tweetID);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tweetSource)) {
        this.tweetSource = data().deepCopy(fields()[4].schema(), other.tweetSource);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isTruncated)) {
        this.isTruncated = data().deepCopy(fields()[5].schema(), other.isTruncated);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.isRT)) {
        this.isRT = data().deepCopy(fields()[6].schema(), other.isRT);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.tweet)) {
        this.tweet = data().deepCopy(fields()[7].schema(), other.tweet);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'tweetdate' field.
      * @return The value.
      */
    public java.lang.String getTweetdate() {
      return tweetdate;
    }


    /**
      * Sets the value of the 'tweetdate' field.
      * @param value The value of 'tweetdate'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setTweetdate(java.lang.String value) {
      validate(fields()[0], value);
      this.tweetdate = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tweetdate' field has been set.
      * @return True if the 'tweetdate' field has been set, false otherwise.
      */
    public boolean hasTweetdate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'tweetdate' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearTweetdate() {
      tweetdate = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userID' field.
      * @return The value.
      */
    public java.lang.Long getUserID() {
      return userID;
    }


    /**
      * Sets the value of the 'userID' field.
      * @param value The value of 'userID'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setUserID(java.lang.Long value) {
      validate(fields()[1], value);
      this.userID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userID' field has been set.
      * @return True if the 'userID' field has been set, false otherwise.
      */
    public boolean hasUserID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userID' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearUserID() {
      userID = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'fullName' field.
      * @return The value.
      */
    public java.lang.String getFullName() {
      return fullName;
    }


    /**
      * Sets the value of the 'fullName' field.
      * @param value The value of 'fullName'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setFullName(java.lang.String value) {
      validate(fields()[2], value);
      this.fullName = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'fullName' field has been set.
      * @return True if the 'fullName' field has been set, false otherwise.
      */
    public boolean hasFullName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'fullName' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearFullName() {
      fullName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweetID' field.
      * @return The value.
      */
    public java.lang.Long getTweetID() {
      return tweetID;
    }


    /**
      * Sets the value of the 'tweetID' field.
      * @param value The value of 'tweetID'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setTweetID(java.lang.Long value) {
      validate(fields()[3], value);
      this.tweetID = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'tweetID' field has been set.
      * @return True if the 'tweetID' field has been set, false otherwise.
      */
    public boolean hasTweetID() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'tweetID' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearTweetID() {
      tweetID = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweetSource' field.
      * @return The value.
      */
    public java.lang.String getTweetSource() {
      return tweetSource;
    }


    /**
      * Sets the value of the 'tweetSource' field.
      * @param value The value of 'tweetSource'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setTweetSource(java.lang.String value) {
      validate(fields()[4], value);
      this.tweetSource = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tweetSource' field has been set.
      * @return True if the 'tweetSource' field has been set, false otherwise.
      */
    public boolean hasTweetSource() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tweetSource' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearTweetSource() {
      tweetSource = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isTruncated' field.
      * @return The value.
      */
    public java.lang.Boolean getIsTruncated() {
      return isTruncated;
    }


    /**
      * Sets the value of the 'isTruncated' field.
      * @param value The value of 'isTruncated'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setIsTruncated(java.lang.Boolean value) {
      validate(fields()[5], value);
      this.isTruncated = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isTruncated' field has been set.
      * @return True if the 'isTruncated' field has been set, false otherwise.
      */
    public boolean hasIsTruncated() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isTruncated' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearIsTruncated() {
      isTruncated = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'isRT' field.
      * @return The value.
      */
    public java.lang.Boolean getIsRT() {
      return isRT;
    }


    /**
      * Sets the value of the 'isRT' field.
      * @param value The value of 'isRT'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setIsRT(java.lang.Boolean value) {
      validate(fields()[6], value);
      this.isRT = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'isRT' field has been set.
      * @return True if the 'isRT' field has been set, false otherwise.
      */
    public boolean hasIsRT() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'isRT' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearIsRT() {
      isRT = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'tweet' field.
      * @return The value.
      */
    public java.lang.String getTweet() {
      return tweet;
    }


    /**
      * Sets the value of the 'tweet' field.
      * @param value The value of 'tweet'.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder setTweet(java.lang.String value) {
      validate(fields()[7], value);
      this.tweet = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'tweet' field has been set.
      * @return True if the 'tweet' field has been set, false otherwise.
      */
    public boolean hasTweet() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'tweet' field.
      * @return This builder.
      */
    public tweet.kafka.avro.Tweet.Builder clearTweet() {
      tweet = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tweet build() {
      try {
        Tweet record = new Tweet();
        record.tweetdate = fieldSetFlags()[0] ? this.tweetdate : (java.lang.String) defaultValue(fields()[0]);
        record.userID = fieldSetFlags()[1] ? this.userID : (java.lang.Long) defaultValue(fields()[1]);
        record.fullName = fieldSetFlags()[2] ? this.fullName : (java.lang.String) defaultValue(fields()[2]);
        record.tweetID = fieldSetFlags()[3] ? this.tweetID : (java.lang.Long) defaultValue(fields()[3]);
        record.tweetSource = fieldSetFlags()[4] ? this.tweetSource : (java.lang.String) defaultValue(fields()[4]);
        record.isTruncated = fieldSetFlags()[5] ? this.isTruncated : (java.lang.Boolean) defaultValue(fields()[5]);
        record.isRT = fieldSetFlags()[6] ? this.isRT : (java.lang.Boolean) defaultValue(fields()[6]);
        record.tweet = fieldSetFlags()[7] ? this.tweet : (java.lang.String) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tweet>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tweet>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tweet>
    READER$ = (org.apache.avro.io.DatumReader<Tweet>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.tweetdate);

    if (this.userID == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.userID);
    }

    if (this.fullName == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.fullName);
    }

    if (this.tweetID == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.tweetID);
    }

    if (this.tweetSource == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.tweetSource);
    }

    if (this.isTruncated == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeBoolean(this.isTruncated);
    }

    if (this.isRT == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeBoolean(this.isRT);
    }

    if (this.tweet == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.tweet);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.tweetdate = in.readString();

      if (in.readIndex() != 0) {
        in.readNull();
        this.userID = null;
      } else {
        this.userID = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.fullName = null;
      } else {
        this.fullName = in.readString();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.tweetID = null;
      } else {
        this.tweetID = in.readLong();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.tweetSource = null;
      } else {
        this.tweetSource = in.readString();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.isTruncated = null;
      } else {
        this.isTruncated = in.readBoolean();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.isRT = null;
      } else {
        this.isRT = in.readBoolean();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.tweet = null;
      } else {
        this.tweet = in.readString();
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.tweetdate = in.readString();
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.userID = null;
          } else {
            this.userID = in.readLong();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.fullName = null;
          } else {
            this.fullName = in.readString();
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.tweetID = null;
          } else {
            this.tweetID = in.readLong();
          }
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.tweetSource = null;
          } else {
            this.tweetSource = in.readString();
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.isTruncated = null;
          } else {
            this.isTruncated = in.readBoolean();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.isRT = null;
          } else {
            this.isRT = in.readBoolean();
          }
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.tweet = null;
          } else {
            this.tweet = in.readString();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










